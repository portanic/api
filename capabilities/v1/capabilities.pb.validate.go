// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: capabilities/v1/capabilities.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PluginCapabilities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PluginCapabilities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PluginCapabilities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PluginCapabilitiesMultiError, or nil if none found.
func (m *PluginCapabilities) ValidateAll() error {
	return m.validate(true)
}

func (m *PluginCapabilities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PluginCapabilitiesMultiError(errors)
	}

	return nil
}

// PluginCapabilitiesMultiError is an error wrapping multiple validation errors
// returned by PluginCapabilities.ValidateAll() if the designated constraints
// aren't met.
type PluginCapabilitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginCapabilitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginCapabilitiesMultiError) AllErrors() []error { return m }

// PluginCapabilitiesValidationError is the validation error returned by
// PluginCapabilities.Validate if the designated constraints aren't met.
type PluginCapabilitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginCapabilitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginCapabilitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginCapabilitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginCapabilitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginCapabilitiesValidationError) ErrorName() string {
	return "PluginCapabilitiesValidationError"
}

// Error satisfies the builtin error interface
func (e PluginCapabilitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPluginCapabilities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginCapabilitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginCapabilitiesValidationError{}

// Validate checks the field values on GetCapabilitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCapabilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCapabilitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCapabilitiesRequestMultiError, or nil if none found.
func (m *GetCapabilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCapabilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PluginId

	if len(errors) > 0 {
		return GetCapabilitiesRequestMultiError(errors)
	}

	return nil
}

// GetCapabilitiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetCapabilitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCapabilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCapabilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCapabilitiesRequestMultiError) AllErrors() []error { return m }

// GetCapabilitiesRequestValidationError is the validation error returned by
// GetCapabilitiesRequest.Validate if the designated constraints aren't met.
type GetCapabilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCapabilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCapabilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCapabilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCapabilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCapabilitiesRequestValidationError) ErrorName() string {
	return "GetCapabilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCapabilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCapabilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCapabilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCapabilitiesRequestValidationError{}

// Validate checks the field values on GetCapabilitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCapabilitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCapabilitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCapabilitiesResponseMultiError, or nil if none found.
func (m *GetCapabilitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCapabilitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetCapabilities()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCapabilitiesResponseValidationError{
					field:  "Capabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCapabilitiesResponseValidationError{
					field:  "Capabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapabilities()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCapabilitiesResponseValidationError{
				field:  "Capabilities",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCapabilitiesResponseMultiError(errors)
	}

	return nil
}

// GetCapabilitiesResponseMultiError is an error wrapping multiple validation
// errors returned by GetCapabilitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCapabilitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCapabilitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCapabilitiesResponseMultiError) AllErrors() []error { return m }

// GetCapabilitiesResponseValidationError is the validation error returned by
// GetCapabilitiesResponse.Validate if the designated constraints aren't met.
type GetCapabilitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCapabilitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCapabilitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCapabilitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCapabilitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCapabilitiesResponseValidationError) ErrorName() string {
	return "GetCapabilitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCapabilitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCapabilitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCapabilitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCapabilitiesResponseValidationError{}
