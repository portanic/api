// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugin/v1/plugin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BlockRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockRequestMultiError, or
// nil if none found.
func (m *BlockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identifier

	// no validation rules for Parameters

	if len(errors) > 0 {
		return BlockRequestMultiError(errors)
	}

	return nil
}

// BlockRequestMultiError is an error wrapping multiple validation errors
// returned by BlockRequest.ValidateAll() if the designated constraints aren't met.
type BlockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockRequestMultiError) AllErrors() []error { return m }

// BlockRequestValidationError is the validation error returned by
// BlockRequest.Validate if the designated constraints aren't met.
type BlockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockRequestValidationError) ErrorName() string { return "BlockRequestValidationError" }

// Error satisfies the builtin error interface
func (e BlockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockRequestValidationError{}

// Validate checks the field values on PageRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageRequestMultiError, or
// nil if none found.
func (m *PageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identifier

	// no validation rules for Parameters

	if len(errors) > 0 {
		return PageRequestMultiError(errors)
	}

	return nil
}

// PageRequestMultiError is an error wrapping multiple validation errors
// returned by PageRequest.ValidateAll() if the designated constraints aren't met.
type PageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageRequestMultiError) AllErrors() []error { return m }

// PageRequestValidationError is the validation error returned by
// PageRequest.Validate if the designated constraints aren't met.
type PageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageRequestValidationError) ErrorName() string { return "PageRequestValidationError" }

// Error satisfies the builtin error interface
func (e PageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageRequestValidationError{}

// Validate checks the field values on DataRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataRequestMultiError, or
// nil if none found.
func (m *DataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identifier

	// no validation rules for Parameters

	if len(errors) > 0 {
		return DataRequestMultiError(errors)
	}

	return nil
}

// DataRequestMultiError is an error wrapping multiple validation errors
// returned by DataRequest.ValidateAll() if the designated constraints aren't met.
type DataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataRequestMultiError) AllErrors() []error { return m }

// DataRequestValidationError is the validation error returned by
// DataRequest.Validate if the designated constraints aren't met.
type DataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataRequestValidationError) ErrorName() string { return "DataRequestValidationError" }

// Error satisfies the builtin error interface
func (e DataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataRequestValidationError{}

// Validate checks the field values on BlockResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockResponseMultiError, or
// nil if none found.
func (m *BlockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for HtmlContent

	// no validation rules for Message

	if len(errors) > 0 {
		return BlockResponseMultiError(errors)
	}

	return nil
}

// BlockResponseMultiError is an error wrapping multiple validation errors
// returned by BlockResponse.ValidateAll() if the designated constraints
// aren't met.
type BlockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockResponseMultiError) AllErrors() []error { return m }

// BlockResponseValidationError is the validation error returned by
// BlockResponse.Validate if the designated constraints aren't met.
type BlockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockResponseValidationError) ErrorName() string { return "BlockResponseValidationError" }

// Error satisfies the builtin error interface
func (e BlockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockResponseValidationError{}

// Validate checks the field values on PageResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageResponseMultiError, or
// nil if none found.
func (m *PageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for HtmlContent

	// no validation rules for Message

	if len(errors) > 0 {
		return PageResponseMultiError(errors)
	}

	return nil
}

// PageResponseMultiError is an error wrapping multiple validation errors
// returned by PageResponse.ValidateAll() if the designated constraints aren't met.
type PageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageResponseMultiError) AllErrors() []error { return m }

// PageResponseValidationError is the validation error returned by
// PageResponse.Validate if the designated constraints aren't met.
type PageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageResponseValidationError) ErrorName() string { return "PageResponseValidationError" }

// Error satisfies the builtin error interface
func (e PageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageResponseValidationError{}

// Validate checks the field values on DataResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataResponseMultiError, or
// nil if none found.
func (m *DataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Data

	// no validation rules for Message

	if len(errors) > 0 {
		return DataResponseMultiError(errors)
	}

	return nil
}

// DataResponseMultiError is an error wrapping multiple validation errors
// returned by DataResponse.ValidateAll() if the designated constraints aren't met.
type DataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataResponseMultiError) AllErrors() []error { return m }

// DataResponseValidationError is the validation error returned by
// DataResponse.Validate if the designated constraints aren't met.
type DataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataResponseValidationError) ErrorName() string { return "DataResponseValidationError" }

// Error satisfies the builtin error interface
func (e DataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataResponseValidationError{}
